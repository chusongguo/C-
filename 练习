          32位（64位系统同理）
在内存中有2^32个内存地址位
0000000000000000000000000
0000000000000000000000001
0000000000000000000000010
…………
1000000000000000000000000
1000000000000000000000001
…………
1111111111111111111111110
1111111111111111111111111
每个地址有1个字节byte内存空间
2^32/8/1024/1024/1024=4
32位系统理论上有4GB内存



%p输出地址
int main()
{
	int a=10;//四个字节
	int* p=	&a;//取地址
	printf("%p\n",&a);//打印输出a的16进制地址位

	return 0;
  （0113FEF4）运行后输出随机16进制地址位
将其进行2进制转换即为‘a=10’在内存中的地址
0001000100111111111011110100

指针
int* p=&a//*p存贮a的地址，p有自己的地址
*p=20//相当于直接利用p找到a的地址并将a地址中的10修改为20
int main()
{
	int a=10;//四个字节
	int* p=	&a;//取地址//int* p 指针变量--一种存放地址的变量
             //p用来存放a的地址
             //int*是p的类型
	printf("%p\n",p);//输出打印p（a）的16进制地址位

	return 0;
}
用指针变量输出结果与直接寻址相同
（0113FEF4）运行后输出随机16进制地址位
将其进行2进制转换即为‘p=a=10’在内存中的地址
0001000100111111111011110100

*p解引用操作符
*p=20--找到a的地址并将a的值修改为20
{
	int a=10;//四个字节
	int* p=	&a;//取地址//int* p 指针变量--一种存放地址的变量
             //p用来存放a的地址
             //int*是p的类型
	printf("%p\n",p);//输出打印p（a）的16进制地址位
  return 0;
  }
  
	int a=10;
	int* p=	&a;
  printf("%d\n",a); //a存储的内容        
	printf("%p\n",p);//p存储的内容
  printf("%p\n",&a);//a的地址
   *p=20          //将a地址上存放的数据改为20
   printf（"a=%d\n",a）;
   &p;//p的地址
   printf("%p\n"&p);//输出p的地址
	return 0;
  输出为
  10
006FF9DC
006FF9DC
a=20
0096F82C//p的地址
int* p=&a//p有自己的地址，p储存的是a的地址；即p存贮a的地址
*p=20//相当于直接利用p存储的地址找到a的地址并将a地址中的10修改为20
练习
char a='w';
	char* z=&a;
	printf("%c\n",a);
	printf("%p\n",z);
	*z='x';
	printf("%c\n",*z);
  printf("%d\n",sizeof(z));//指针变量z的大小
		return 0;
    输出
w          //a存放的数据
00FEFE03   //a的地址
x          //*z='x'后，a的数据从‘w’变为‘x’
4         //32位系统指针变量z占用4字节byte
          //而64位系统指针变量z占用8字节byte

32位系统一个指针变量*p只占用32bit=4字节byte空间
64位系统一个指针变量*p占用64bit=8字节byte空间


 int main()

	{
		double a=3.14;
		double*p=&a;
		printf("%lf\n",a);//输出a的内容
		*p=5;//*p解操作符，*p相当于直接修改a
		printf("%lf\n",a);//输出修改后a的内容
		return 0;
	}



struct 结构体类型变量
//人，书等复杂对象需要用结构体类型描述
//名字，性别等等
struct book
{
	char name[20];//书名：c语言
	//利用结构体类型创建一个复杂结构变量
int jiage;//价格
};
#include <string.h>   //调用strcpy的库函数
int main()
{
	struct book b1 ={"c语言",55}; 

  struct book* z=&b1;
printf("%s\n",(*z).name);
 printf("%d\n",(*z).jiage);//同样可以利用指针变量代表相应函数；
printf("%s\n",z->name)；
printf("%d\n",z->jiage);// ' .'与'->'性质类似

	printf("书名：%s\n",b1.name);//输出 书名c语言
	printf("价格：%d\n",b1.jiage);//输出 价格 55
	strcpy (b1.name,“c++”);            //修改字符变量
                b1.jiage=30;             // 可以重新赋值变量
	printf("修改后的价格：%d\n",b1.jiage);//输出 修改后的价格：30
	return 0;


{{{{strcpy (b1.name,"c++");     strcpy 字符串拷贝//用于修改书名  （ 库函数  需要调用#include<string.h>}}}
                printf("修改后的书名：%s\n",b1.name);
	printf("修改后的价格：%d\n",b1.jiage);//输出 修改后的价格：30
	return 0;
分支语句--》if语句，switch语句
if（选择语句）
if
else if
else if
else

#include <stdio.h>
int main()
{
	int age=66;
	if(age<18)
		printf("未成年\n");
	else if(age>=18&&age<28)
		printf("青年\n");
	else if(age>=28&&age<60)
		printf("中年\n");
	else
		printf("老年\n");
	return 0;

}
与下式等价
#include <stdio.h>
int main()
{
	int age=66;
	if(age<18)
		printf("未成年\n");
              else
                {
                if(age>=18&&age<28)
		printf("青年\n");
	else if(age>=28&&age<60)
		printf("中年\n");
	else
		printf("老年\n");
                 }
	return 0;
	}

int main()
{
	int a=0,b=2;
	if(a==1)
		if(b==2)
		printf("haha\n");
		else               //else只与距离最近的if相匹配
	
		printf("hehe\n");
	return 0;
加入{}限制区间即可
int main()
{
	int a=0,b=2;
	if(a==1)
		{if(b==2)
		printf("haha\n");
		else              
	
		printf("hehe\n");
}
	return 0;
}
（注意=赋值 与 ==判断相等）
{
	int a=3;
if(a=4)     //一个=是赋值，==两个等号才是判断相等
	{printf("hehe\n");
}
return 0;
}
{
	int a=3;
if(4 ==a)    //先写常量能有效避免==判断相等符写成=的错误
	        //4 =a是将a赋值给4，是不成立的，会报错
	{printf("hehe\n");
}
return 0;
}
（输出100以内所有奇数）
（1）
{
	int a=1;
	
	while(a<=100)
	{
		if(a%2==1)      //（a%2 !=0）a模2不等于0
		printf("%d ",a);
	
		a++;
	}
	return 0;
}
（2）
{
	int a=1;
	
	while(a<=100)
	{
		printf("%d ",i);
                                i+=2;   //输出1，1+2，3+2，5+2。。。。
	}
	return 0;
}



switch语句（整型表达式）

{
	int a;
	scanf("%d",&a);
	switch(a)//（选择并判断a满足语句内那个条件）
	{
	case 1 :
			printf("星期一\n");
			break;     //中断，跳出   如果满足case 1将输出打印星期一并跳出语句，不满足则继续执行
			      //如果没有break 则会继续向下执行，知道遭遇break或语句结束
	case 2:
			printf("星期二\n");
			break;  //中断，跳出   如果满足case 2将输出打印星期二并跳出语句，不满足则继续执行
	case 3:			
			printf("星期三\n");
			break;  //中断，跳出   如果满足case 3将输出打印星期三并跳出语句，不满足则继续执行
	case 4:
	         printf("hehe\n");//对switch没有影响
			printf("星期四\n");
			break;  //中断，跳出   如果满足case 4将输出打印星期四并跳出语句，不满足则继续执行
	case 5:
			printf("星期五\n");
			break;  //中断，跳出   如果满足case 5将输出打印星期五并跳出语句，不满足则继续执行
	case 6:
			printf("星期六\n");
			break;  //中断，跳出   如果满足case 6将输出打印星期六并跳出语句，不满足则继续执行
	case 7:
			printf("星期日\n");
			break;  //中断，跳出   如果满足case 7将输出打印星期日并跳出语句，不满足则继续执行
        default:   //如果输入数字不在区间范围，则会输出以下反馈内容，即“输入错误”
	          //   default 可在尾部也可以在首部，中间，它与case没有顺序之分
		printf("输入错误\n");
	}
	return 0;
}


循环语句（while循环，for循环，do while循环）
while语句（如果满足while的条件，即while（1）--真，则执行语句并不断循环执行，直到不满足while的条件，即while（0）--假，才会跳出语句）
{
	int a=1;
	while(a<=10)
	{
	if(a==6)
          break;///如果在while中加入判断，当a满足if的条件时，语句会直接break跳出，不在向下继续执行
	 // continue      continue是满足if条件后跳出此次循环（之后的代码不再执行），转而重新进行下一次循环。即终止本次循环，进行下一次循环
		printf("%d\n",a);
		a++;
	}
	return 0;
}

getchar（获取键盘上输入的字符）
putchar（输出键盘上输入的字符）//与 printf("%c\n",a) 功能相同

int a=getchar();
printf("%c\n",a);
return 0;



	int a=0;
	while((a=getchar())!=EOF)//键入字符如果不等于EOF则输出键入的字符
	                     //EOF-->end of file-->-1
	{
		putchar(a);//输出键入字符
	}
	
	return 0;//  ctrl+z  可以中断程序


