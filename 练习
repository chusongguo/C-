          32位（64位系统同理）
在内存中有2^32个内存地址位
0000000000000000000000000
0000000000000000000000001
0000000000000000000000010
…………
1000000000000000000000000
1000000000000000000000001
…………
1111111111111111111111110
1111111111111111111111111
每个地址有1个字节byte内存空间
2^32/8/1024/1024/1024=4
32位系统理论上有4GB内存



%p输出地址
int main()
{
	int a=10;//四个字节
	int* p=	&a;//取地址
	printf("%p\n",&a);//打印输出a的16进制地址位

	return 0;
  （0113FEF4）运行后输出随机16进制地址位
将其进行2进制转换即为‘a=10’在内存中的地址
0001000100111111111011110100

指针
int* p=&a//*p存贮a的地址，p有自己的地址
*p=20//相当于直接利用p找到a的地址并将a地址中的10修改为20
int main()
{
	int a=10;//四个字节
	int* p=	&a;//取地址//int* p 指针变量--一种存放地址的变量
             //p用来存放a的地址
             //int*是p的类型
	printf("%p\n",p);//输出打印p（a）的16进制地址位

	return 0;
}
用指针变量输出结果与直接寻址相同
（0113FEF4）运行后输出随机16进制地址位
将其进行2进制转换即为‘p=a=10’在内存中的地址
0001000100111111111011110100

*p解引用操作符
*p=20--找到a的地址并将a的值修改为20
{
	int a=10;//四个字节
	int* p=	&a;//取地址//int* p 指针变量--一种存放地址的变量
             //p用来存放a的地址
             //int*是p的类型
	printf("%p\n",p);//输出打印p（a）的16进制地址位
  return 0;
  }
  
	int a=10;
	int* p=	&a;
  printf("%d\n",a); //a存储的内容        
	printf("%p\n",p);//p存储的内容
  printf("%p\n",&a);//a的地址
   *p=20          //将a地址上存放的数据改为20
   printf（"a=%d\n",a）;
   &p;//p的地址
   printf("%p\n"&p);//输出p的地址
	return 0;
  输出为
  10
006FF9DC
006FF9DC
a=20
0096F82C//p的地址
int* p=&a//p有自己的地址，p储存的是a的地址；即p存贮a的地址
*p=20//相当于直接利用p存储的地址找到a的地址并将a地址中的10修改为20
练习
char a='w';
	char* z=&a;
	printf("%c\n",a);
	printf("%p\n",z);
	*z='x';
	printf("%c\n",*z);
  printf("%d\n",sizeof(z));//指针变量z的大小
		return 0;
    输出
w          //a存放的数据
00FEFE03   //a的地址
x          //*z='x'后，a的数据从‘w’变为‘x’
4         //32位系统指针变量z占用4字节byte
          //而64位系统指针变量z占用8字节byte

32位系统一个指针变量*p只占用32bit=4字节byte空间
64位系统一个指针变量*p占用64bit=8字节byte空间


 int main()

	{
		double a=3.14;
		double*p=&a;
		printf("%lf\n",a);//输出a的内容
		*p=5;//*p解操作符，*p相当于直接修改a
		printf("%lf\n",a);//输出修改后a的内容
		return 0;
	}



struct 结构体类型变量
//人，书等复杂对象需要用结构体类型描述
//名字，性别等等
struct book
{
	char name[20];//书名：c语言
	//利用结构体类型创建一个复杂结构变量
int jiage;//价格
};
int main()
{
	struct book b1 ={"c语言",55}; 

  struct book* z=&b1;
printf("%s\n",(*z).name);
 printf("%d\n",(*z).jiage);//同样可以利用指针变量代表相应函数；
printf("%s\n",z->name)；
printf("%d\n",z->jiage);// ' .'与'->'性质类似

	printf("书名：%s\n",b1.name);//输出 书名c语言
	printf("价格：%d\n",b1.jiage);//输出 价格 55
                b1.jiage=30;                            // 可以重新赋值变量
	printf("修改后的价格：%d\n",b1.jiage);//输出 修改后的价格：30
	return 0;


