#include<stdio.h>
int add(int x,int y)//没有分号，定义一个减法函数
{
	int z=x-y;
	return z;
}
int main()
{
	int a=100,b=200,c=300,d=400,e,f;
	e=add(b,a);
	f=add(c,d);
	printf("%d\n%d\n",e,f);
	return 0;
  （计算字符串空间）
  #include <stdio.h>
int main()
{
	char arr[4]={"csgd"};
	printf("%d\n",sizeof(arr));//计算数组所占空间（比特）
	return 0;

}

（显示字符串）
#include<stdio.h>
int main()
{
	char arr[]={"c:\\x86\\test\\user"};
	printf("%s\n", arr);
	return 0;
}
（计算字符串长度）
#include<stdio.h>
int main()
{
	
	printf("%d\n",strlen("c:\\x86\\test\\user") );
	return 0;
}
（ab比较大小）
#include<stdio.h>
int main()
{
	int a,b;
	scanf("%d%d",&a,&b);
	if(a>b)
		printf("a\n");
	else 
		printf("b\n");
	return 0;
}
（比较ab大小并输出整型数字）
#include<stdio.h>
int main()
{
	int a=10,b=11;
	
	if(a>b)
		printf("较大值是：%d\n",a);
	else 
		printf("较大值是：%d\n",b);
	return 0;
}
（创建一个比较函数比较数字大小并输出）
#include<stdio.h>
int MAX(int x,int y)
{
	if (x>y)
		return x;
	else
		return y;
		
}
int main()
{
	int a,b,max;
	scanf("%d%d",&a,&b);
	
	max=MAX(a,b);
	printf("较大值是：%d\n",max);
	return 0;

	return 0;
}
（简单的循环）
#include<stdio.h>
int main()
{
	
	int i=0;
	
	while(i<10000)
	{
		printf("继续努力\n已学习：%d天\n",i);
	i++;
	}
	if(i>=10000)
		printf("成功在向你招手\n");
	return 0;

}


二进制码换算
只要是整数，内存中存的都是2进制补码            原码----------->反码--------->补码
正数的原码，反码，补码是相同的             直接按照正负   原码符号位不变   反码+1
负数在内存中存的是补码                  写出的2进制序列  其他位取反得到
（~按位取反）2进制位（去补码）            原码（取反）=反码（+1）=补码
-2
10000000000000000000000000000010---》原码
11111111111111111111111111111101---》反码
11111111111111111111111111111110---》补码
int main()
{
	int a=0;          //00000000000000000000000000000000（第一位为符号位，0为正，1为负）
	int b=~a;         //11111111111111111111111111111111(负数在内存中存的是这个数的补码)---反码=补码-1，原码=反码（取反）
  //补码-1=反码=11111111111111111111111111111110--反码取反=原码=100000000000000000000000000000001（符号位不变）
	printf("%d\n",b); //10000000000000000000000000000001（打印的是原码）（转换成10进制=-1）
	
	
	return 0;

}
（逻辑与和逻辑或）&&  ||
int main()
{
	//int a=1;//000000000000000000000000000001
	//int b=~a;//111111111111111111111111111110-1
	//printf("%d\n",b);//1111111111111111111111111101--取反
	//                 //1000000000000000000000000010原码
	//
	//return 0;
int a=1,b=2;//&&==非0----真；0----假；  ||=有一个非0即为真，两个都为0才为假
int c=a&&b;//1（真）与2（真）为真  &&与运算  ||或运算 
printf("%d\n",c);//输出1（真）输出0（假）
return 0;

三目操作符/条件操作符
（sep1? sep2 sep3）如果sep1为真，则zep2为真；
                   如果seo1为假，则zep3为真。
#include<stdio.h>
int main()
{
	int a=100,b=99;
	int max;
	max=(a>b?a:b);//如果a>b为真，则a为真，将a赋值给max；
	              //如果a>b为假，则b为真，将b赋值给max。
	printf("%d\n",max);
	return 0;
  练习
  #include<stdio.h>
int main()
{
	int a,b;
	int max;
	scanf("%d%d",&a,&b);
	max=(a>b?a:b);//如果a>b为真，则a为真，输出a；
	              //如果a>b为假，则b为真，输出b。
	printf("%d\n",max);
	return 0;

}
typedef 自定义函数名称 （重命名、改名卡）
typedef unsigned int u_int//将无符号定义自定义为u_int
unsigned int num=20;//无符号定义，即不分正负，全部为正


（循环代码） 
#include<stdio.h>
int test()
{
	int i=1;
	i++;
	printf("i=%d\n",i);//test()输出打印i=+1=2并另起一行
	
}
int main()
{
	
	int a=0;
	while(a<5)
	{
		test();//打印i=3并另起一行
		a++;//a+1,继续循环直至>=5跳出循环
	}
	return 0;
} 
输出：
2
2
2
2
2



static  修饰变量与修饰函数同理
static修饰局部变量会使局部变量生命周期变长；
ststic修饰全局变量会改变变量的作用域--让静态的全局变量只能在自己所在的源文件内部使用；
出了此源文件将无法再使用。

（以上代码为例）
#include<stdio.h>
int test()
{
	static int i=1;//static定义一个静态局部变量，
	              //本来当第一次输出i=2后，i就应被销毁，将i重新赋值1，
		      //但添加static后，使i的生命周期边长，不会直接销毁。
	//i第一次是1，输出1++=2，后i不会被销毁；第二次直接引用i=2，输出变成2++=3；第三次输出为3;第四次为4...
	i++;
	printf("i=%d\n",i);
	
}
输出：
2
3
4
5
6

#define可以替换自定义函数，如下
int MAX(int x,int y)
{
	if(x>y)
		return x;
	else 
		return y;
}
可替换为
#define MAX(x,y)(x>y?x:y);
例子 
  #define 宏定义                              自定义函数
#include<stdio.h>                          int MAX(intx,inty)
                                           {
#define MAX(x,y)(x>y?x:y);                      if(x>y)
int main()                                    return x;
{                                             else
	int a=10,b=20;                          return y;
	int max=MAX(a,b);                    }   
	printf("max=%d\n",max);             int main()
	return 0;                          {
                                                 int a=10,b=20;
}                                                int max=MAX(a,b);
                                           printf("max=%d\n",max);
				             return 0; }
